## How did viewing a diff between two versions of a file help you see the bug that was introduced?

Using diff to view the two files provides a fast way to find changes
made between two versions of the same project. It allows a person to see
which lines have been changed and in what way without having to read
through the entire document.

## How could having easy access to the entire history of a file make you a more efficient programmer in the long term

Having access to every version of a file would make it possible not only
to look over older versions of the file to search for errors but also to
create new projects based off of more primitive versions of an existing
project. 

## What do you think are the pros and cons of manually choosing when to create a commit, like you did in Git, vs having versions automatically saved, like Google Docs does?

Manually saving allows all commits to be broken down into logical steps
which make sense to users. The downside is that this allows for human
error such as saving at times that won't be helpful to others or even
forgetting to save altogether

## Why do you thin some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Bundling changes to several files into a single commit is helpful for
tasks such as programming in which a single change may affect several
interrelated files. Applying this feature to a project where files
generally do not relate to one another is unnecessary and potentially
confusing.

## How can you use the commands git log and git diff to view the history of files?

The "git log" command will provide a list of every commit that has been
submitted for a project. The changes between any two commits can be
viewed by entering their IDs into the git diff command.

## How might using version control make you more confident to make changes that could break something?

Being able to quickly restore any past version of a project allows a
developer to experiment with more more drastic changes than they might
make otherwise as it will be easy to revert to an earlier, more stable,
state in the projects life-cycle.

## Now that you have your workspace set up, what do you want to try using Git for?

While most of personal programming projects are to small for version control
to be absolutely necessary, I have been attempting to learn some of the basics
for developing apps on the Android platform. As many of the tutorials for
learning this system involve modifying templates either found on the internet
or generated by the Android Studio IDE git will better allow me to make my own
experimental changes to these existing templates in order to better learn
how they function.
